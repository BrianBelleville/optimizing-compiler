main
var x;
var y;
var z;
array[2][2][2] RuleBin;

procedure arrayTest(x,y,z);
array[4][5][6] t1;
array[100] t2;
{
  let y <- x + 2;
  let z <- x + 2;
  let t1[x][y][z] <- 4;
  let t2[0] <- 8;
  let t1[x][y][4] <- 16;
  let t1[x][y][0] <- 32;
  let t2[4] <- 64;
  let t1[2][3][4] <- 128;
  let t1[0][0][0] <- 256;
  return
};

procedure InitRuleBin(x);
var Bits;
array[202] Data;
{
  let Bits <- Data[x];
  let Bits <- Data[0];
  let Bits <- call SetNextBit(0, 0, 0, x);
  let x <- 2;
  let Bits <- call SetNextBit(0, 0, 1, x);
  let Bits <- call SetNextBit(0, 1, 0, y);
  let Bits <- call SetNextBit(0, 1, 1, Bits);
  let Bits <- call SetNextBit(1, 0, 0, Bits);
  let Bits <- call SetNextBit(1, 0, 1, Bits);
  let Bits <- call SetNextBit(1, 1, 0, Bits);
  let Bits <- call SetNextBit(1, 1, 1, Bits)
};

{
  let RuleBin[0][y][0] <- 4;
  let RuleBin[2][y][2] <- 4;
  let y <- 2 + 3 + 4 * 5 / 2 * (4 + 5 - 9);
  let z <- 2;
  let x <- RuleBin[1][z][1];
  if x < z then
    let x <- 4;
    while x < y do
      call OutputNum(x);  	
      let x <- z + 4;
      call OutputNum(x);
      while 1 < 3 do
        call OutputNum(x);
        let x <- x + 1;
        call OutputNum(x);
        let x <- 99
      od
    od
  else
    call OutputNum(x);
    while 1 < 3 do
        call OutputNum(x);
        let x <- x + 1;
        call OutputNum(x)
      od;
    call OutputNum(x)
  fi;
  call OutputNum(x)
}.
