#% -no-cse -no-dead-code-elim
# Brian Belleville 2014

main
array[100] g1;			# 400 bytes
array[2][2][2][2] g2;		# 64 bytes
array[4][5][6] g3; 		# 480 bytes
array[4][4] shadow;		# 64 bytes
var gv;				# 4 bytes

# this will be local to main
var lv;

procedure arrayTest(x,y,z);
array[100] l1; 			# 400 bytes
array[2][2][2][2] l2;		# 64 bytes
array[4][5][6] l3;		# 480 bytes
array[5][5] shadow;		# 100 bytes
var w, v;
{
  # assign to global, since memory is assigned when the first use is parsed, this will get the first global address
  let gv <- 4; 			

  # offset determined during compilation to be 0
  let w <- l1[0];
  let w <- l2[0][0][0][0];

  # offset determined entirely during compilation to be non 0
  let w <- l1[4];
  let w <- l2[1][0][1][1];
  let w <- l3[3][4][5];

  # partial offset can be calculated during compilation
  let v <- l2[1][x][0][y];
  # refers to the local shadow
  let v <- shadow[4][z];
  
  # offset must be computed entirely dynamically.
  # assign to globals so they can't be optimized as local to main
  let g1[x] <- y;
  let g2[x][y][z][x] <- x + y;
  let g3[x][x][x] <- x + x;
  return
};

{
  let lv <- gv;
  let lv <- shadow[2][2];
  let lv <- g3[3][lv][4];
  call arrayTest(1, 1, 1)
}.
