#% -cse
# Brian Belleville 2014

main
var x;
var y;
var z;
array[100] g1;

procedure arrayTest(x,y,z);
array[100] t1;
var w;
var v;
{
  let w <- t1[4];
  let v <- t1[4] + 2;
  let g1[x] <- y;
  return
};

procedure arithTest(x, y, z);
var w;
var v;
{
# should only result in a single add
  let w <- x + y;
  let v <- y + x 
};

procedure ifTest(x, y, z);
var w;
var v;
var a;
array[100] t;
{
  let w <- x + y;
  let w <- t[4];
  let w <- t[4] + 2;
  if y + x < z  then
    let v <- y + z
  else
    let v <- z + w
  fi;
  # this load should not be eliminated since we should only be
  # searching within the same BB
  let a <- t[4];
  call arithTest(w, v, a);
  let a <- t[4];                # this should be eliminated, t is local
  let t[0] <- 4;
  let a <- t[4];                #this shoudl not be eliminated, there was a store
  let a <- z + w;
  let v <- x + y;
  call OutoutNum(v)
};

{
# the next 2 lines should result in 1 load
  let x <- g1[3];
  let y <- g1[3] + 3;
  
  call arrayTest(x, y, 4);
  # load should not be eliminated, g1 is global
  let z <- g1[3]
}.
