#!/usr/bin/python3
# -*- mode: python; python-shell-interpreter: "python3"; -*-

import os
import subprocess
from sys import argv
from collections import OrderedDict

diff = "diff"
dot = "dot"
pl241c = "/home/brian/Code/cs241/pl241c"
dlx = "/home/brian/Code/cs241/dlx"
test_dir = "/home/brian/Code/cs241/test/"
input_dir = test_dir + "cases/"
cfg_output_dir = test_dir + "cfg/reference/"
cfg_result_dir = test_dir + "cfg/results/"

sim_ref_output_dir = test_dir + "sim/reference_output/"
sim_result_dir = test_dir + "sim/results/"
sim_input_dir = test_dir + "sim/input/"

bin_dir = test_dir + "bin/"

# run the arguments as a subprocess, with output redirected to
# /dev/null, return true if the subprocess returns 0, otherwise return
# false.
def run_no_output(args):
    null = open("/dev/null")
    proc = subprocess.Popen(args, stdout = null, stderr = null)
    ret = proc.wait()
    return ret == 0

def run(args):
    proc = subprocess.Popen(args)
    ret = proc.wait()
    return ret == 0

# returns true on success (files match) false on error
def run_diff(file1, file2):
    return run_no_output([diff, file1, file2])

def run_dot(in_file):
    png_out = strip_file_extension(in_file) + ".svg"
    return run_no_output([dot, "-Tsvg", in_file, "-o", png_out])

# you can specify extra compilation options if the first line of the
# file starts with '#%'. After that marker, the remaining contents of
# the first line will be sent to the compiler as extra options
def compile_pl241(in_file, code_out, cfg_out_file, no_output = True):
    extra_args = []
    if(not os.path.exists(in_file)):
        print("File", in_file, "not found, aborting test case ", end="")
        return False
    fin = open(in_file)
    first = fin.readline()
    fin.close()
    if(first[:2] == '#%'):
        extra_args = first[2:].split(sep=" ")
    args = [pl241c, in_file, "-cfg", cfg_out_file, "-o", code_out] + extra_args
    if(no_output):
        return run_no_output(args)
    else:
        return run(args)

def run_sim(exe, input_file, output_file):
    if(os.path.exists(input_file)):
        input_stream = open(input_file)
    else:
        input_stream = open("/dev/null")
    output_stream = open(output_file, 'w')
    proc  = subprocess.Popen([dlx, exe],stdout=output_stream, stdin=input_stream)
    ret = proc.wait()
    input_stream.close()
    output_stream.close()
    return ret == 0

def strip_file_extension(name):
    return os.path.splitext(name)[0]

def file_extension(name):
    return os.path.splitext(name)[1]

def is_test(name):
    return file_extension(name) == '.txt'

# this will return an error string if the test failed, otherwise it
# will return false. This is different than the convention I am using
# for all of my other command running functions, but it makes things easy.
def run_test(name):
    infile = input_dir + name + ".txt"
    cfg_out_ref = cfg_output_dir + name + ".gv"
    cfg_result_file = cfg_result_dir + name + ".gv"
    sim_out_ref = sim_ref_output_dir + name + ".out"
    sim_result_out = sim_result_dir + name + ".out"
    sim_input = sim_input_dir + name + ".in"
    code_out = bin_dir + name
    tested_anything = False
    print("Running test ", name, ".. ", sep="", end="")
    if(not compile_pl241(infile, code_out, cfg_result_file)):
        outmsg = "Compilation error"
        print("FAIL", outmsg)
        return outmsg
    if(not run_dot(cfg_result_file)):
        outmsg = ".gv -> .png layout failed"
        print("FAIL", outmsg)
        return outmsg
    # if the cfg is testable
    if(os.path.exists(cfg_out_ref)):
        tested_anything = True
        if(not run_diff(cfg_out_ref, cfg_result_file)):
            outmsg = "Output incorrect"
            print("FAIL", outmsg)
            return outmsg
    # if runtime output is testable
    if(os.path.exists(sim_out_ref)):
        tested_anything = True
        if(not run_sim(code_out, sim_input, sim_result_out)):
            outmsg = "Error during simulation"
            print("FAIL", outmsg)
            return outmsg
        if(not run_diff(sim_out_ref, sim_result_out)):
            outmsg = "Runtime output incorrect"
            print("FAIL", outmsg)
            return outmsg
    if(not tested_anything):
        outmsg = "No reference outputs"
        print("FAIL", outmsg)
        return outmsg
    print("PASS")
    return False

# use this to generate the reference output once you are confident in
# your compiler
def generate_ref_out(name):
    infile = input_dir + name + ".txt"
    out_file = cfg_output_dir + name + ".gv"
    code_out = bin_dir + name
    print("Generating reference output for ", name, ".. ", sep="", end="")
    if(not compile_pl241(infile, code_out, out_file)):
       print("ERROR Compilation error")
    print("DONE")

if __name__ == "__main__":
    cfg_tests = sorted(list(map(strip_file_extension,
                           filter(lambda name: file_extension(name) == '.gv'
                                  , os.listdir(cfg_output_dir)))))
    sim_tests = sorted(list(map(strip_file_extension,
                                os.listdir(sim_ref_output_dir))))



    # if there are no command line arguments, run all tests that have
    # reference output available
    if(len(argv) == 1):
        tests = sorted( cfg_tests + sim_tests )
    else:
        tests = []
        i = 1
        while i < len(argv):
            a = argv[i]
            if a == "-ref":
                i += 1
                generate_ref_out(argv[i])
            elif a == "-cfg":
                tests += cfg_tests
            elif a == "-sim":
                tests += sim_tests
            elif a == "-compile":
                i += 1
                name = argv[i]
                infile = input_dir + name + ".txt"
                result_file = cfg_result_dir + name + ".gv"
                code_out = bin_dir + name
                print("Compiling", name)
                compile_pl241(infile, code_out, result_file, False)
            elif a == "-all":
                tests = sorted(map(strip_file_extension,
                                   filter(is_test, os.listdir(input_dir))))
            else:
                tests.append(a)
            i += 1

    if(tests):
        # remove duplicate entries from tests
        tests = list(OrderedDict.fromkeys(tests))
        if(not os.path.isdir(cfg_result_dir)):
            os.mkdir(cfg_result_dir)
        if(not os.path.isdir(bin_dir)):
            os.mkdir(bin_dir)
        if(not os.path.isdir(sim_result_dir)):
            os.mkdir(sim_result_dir)
        failures = []
        print("Starting tests\n")
        for t in tests:
            s = run_test(t)
            if(s):
                failures.append(t + ": " + s)
        if(failures):
            print("\nError the following tests have failed:\n")
            for s in failures:
                print(s)
        else:
            print("\nAll tests passed!")




